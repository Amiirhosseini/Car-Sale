//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DB_Lab_phase3
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dblab_phase2_aftercreateEntities : DbContext
    {
        public dblab_phase2_aftercreateEntities()
            : base("name=dblab_phase2_aftercreateEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Car_Type> Car_Type { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Person_Type> Person_Type { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Transaction_Type> Transaction_Type { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<CarsDetail> CarsDetails { get; set; }
        public virtual DbSet<CustomersDetail> CustomersDetails { get; set; }
        public virtual DbSet<SalesDetail> SalesDetails { get; set; }
        public virtual DbSet<SuppliersDetail> SuppliersDetails { get; set; }
    
        [DbFunction("dblab_phase2_aftercreateEntities", "CountrySalesDetail")]
        public virtual IQueryable<CountrySalesDetail_Result> CountrySalesDetail(string countryName)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CountrySalesDetail_Result>("[dblab_phase2_aftercreateEntities].[CountrySalesDetail](@CountryName)", countryNameParameter);
        }
    
        [DbFunction("dblab_phase2_aftercreateEntities", "MilageFilter")]
        public virtual IQueryable<MilageFilter_Result> MilageFilter(Nullable<int> milageMin, Nullable<int> milageMax)
        {
            var milageMinParameter = milageMin.HasValue ?
                new ObjectParameter("MilageMin", milageMin) :
                new ObjectParameter("MilageMin", typeof(int));
    
            var milageMaxParameter = milageMax.HasValue ?
                new ObjectParameter("MilageMax", milageMax) :
                new ObjectParameter("MilageMax", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MilageFilter_Result>("[dblab_phase2_aftercreateEntities].[MilageFilter](@MilageMin, @MilageMax)", milageMinParameter, milageMaxParameter);
        }
    
        public virtual int AddNewPerson(string personTypeName, Nullable<int> nationalCode, string firstName, string lastName, string gender, string cityName, string stateName, string countryName, string emailAddress)
        {
            var personTypeNameParameter = personTypeName != null ?
                new ObjectParameter("PersonTypeName", personTypeName) :
                new ObjectParameter("PersonTypeName", typeof(string));
    
            var nationalCodeParameter = nationalCode.HasValue ?
                new ObjectParameter("NationalCode", nationalCode) :
                new ObjectParameter("NationalCode", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewPerson", personTypeNameParameter, nationalCodeParameter, firstNameParameter, lastNameParameter, genderParameter, cityNameParameter, stateNameParameter, countryNameParameter, emailAddressParameter);
        }
    
        public virtual int ChangeCurrency(string sourceCurrency, string destinationCurrency)
        {
            var sourceCurrencyParameter = sourceCurrency != null ?
                new ObjectParameter("SourceCurrency", sourceCurrency) :
                new ObjectParameter("SourceCurrency", typeof(string));
    
            var destinationCurrencyParameter = destinationCurrency != null ?
                new ObjectParameter("DestinationCurrency", destinationCurrency) :
                new ObjectParameter("DestinationCurrency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCurrency", sourceCurrencyParameter, destinationCurrencyParameter);
        }
    
        public virtual int CustomerBuyFromInv(Nullable<int> personID, string vIN, Nullable<int> price, string currency)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerBuyFromInv", personIDParameter, vINParameter, priceParameter, currencyParameter);
        }
    }
}
